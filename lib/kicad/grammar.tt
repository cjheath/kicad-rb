require 'kicad/ast'

module KiCad
  grammar SExpr
    rule node
      s '(' s values:( value s)+ nodes:(node s)* ')' s
      { def value
          klass_name = values.elements[0].value.value
          klass = KiCad::AST::Node
          if klass_name.is_a? ::Symbol  # See if we have a defined class for this node type
            klass_name = klass_name.to_s.gsub(/\A[a-z]|_[a-z]/) {|from| from[-1].upcase }
            klass = KiCad::AST.const_get(klass_name, false) rescue KiCad::AST::Node
          end
          klass.new values.elements.map(&:value).map(&:value),
                    nodes.elements.map(&:node).map(&:value)
        end
      }
    end

    rule value
      string / number / symbol
    end

    rule symbol
      [a-zA-Z_]+
        { def value; :"#{text_value}"; end }
    end

    rule string
      '"' contents:( ('\\"' / !'"' .)* ) '"'
        { def value; contents.text_value.force_encoding(Encoding::UTF_8); end }
    end

    rule number
      '-'? [0-9]+ ( '.' [0-9]* )?
        { def value; eval(text_value); end }
    end

    rule s
      [ \t\r\n]*
    end
  end
end
