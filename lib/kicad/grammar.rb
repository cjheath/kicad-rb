# Autogenerated from a Treetop grammar. Edits may be lost.


require 'kicad/ast'

module KiCad
  module SExpr
    include Treetop::Runtime

    def root
      @root ||= :node
    end

    module Node0
      def value
        elements[0]
      end

      def s
        elements[1]
      end
    end

    module Node1
      def node
        elements[0]
      end

      def s
        elements[1]
      end
    end

    module Node2
      def s1
        elements[0]
      end

      def s2
        elements[2]
      end

      def values
        elements[3]
      end

      def nodes
        elements[4]
      end

      def s3
        elements[6]
      end
    end

    module Node3
      def value
               klass_name = values.elements[0].value.value
               klass = KiCad::AST::Node
               if klass_name.is_a? ::Symbol  # See if we have a defined class for this node type
                 klass_name = klass_name.to_s.gsub(/\A[a-z]|_[a-z]/) {|from| from[-1].upcase }
                 klass = KiCad::AST.const_get(klass_name, false) rescue KiCad::AST::Node
               end
               klass.new values.elements.map(&:value).map(&:value),
                         nodes.elements.map(&:node).map(&:value)
             end
    end

    def _nt_node
      start_index = index
      if node_cache[:node].has_key?(index)
        cached = node_cache[:node][index]
        if cached
          node_cache[:node][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_s
      s0 << r1
      if r1
        if (match_len = has_terminal?('(', false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('\'(\'')
          r2 = nil
        end
        s0 << r2
        if r2
          r3 = _nt_s
          s0 << r3
          if r3
            s4, i4 = [], index
            loop do
              i5, s5 = index, []
              r6 = _nt_value
              s5 << r6
              if r6
                r7 = _nt_s
                s5 << r7
              end
              if s5.last
                r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
                r5.extend(Node0)
              else
                @index = i5
                r5 = nil
              end
              if r5
                s4 << r5
              else
                break
              end
            end
            if s4.empty?
              @index = i4
              r4 = nil
            else
              r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            end
            s0 << r4
            if r4
              s8, i8 = [], index
              loop do
                i9, s9 = index, []
                r10 = _nt_node
                s9 << r10
                if r10
                  r11 = _nt_s
                  s9 << r11
                end
                if s9.last
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                  r9.extend(Node1)
                else
                  @index = i9
                  r9 = nil
                end
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                if (match_len = has_terminal?(')', false, index))
                  r12 = true
                  @index += match_len
                else
                  terminal_parse_failure('\')\'')
                  r12 = nil
                end
                s0 << r12
                if r12
                  r13 = _nt_s
                  s0 << r13
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Node2)
        r0.extend(Node3)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:node][start_index] = r0

      r0
    end

    def _nt_value
      start_index = index
      if node_cache[:value].has_key?(index)
        cached = node_cache[:value][index]
        if cached
          node_cache[:value][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_string
      if r1
        r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
        r0 = r1
      else
        r2 = _nt_number
        if r2
          r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
          r0 = r2
        else
          r3 = _nt_symbol
          if r3
            r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:value][start_index] = r0

      r0
    end

    module Symbol0
      def value; :"#{text_value}"; end
    end

    def _nt_symbol
      start_index = index
      if node_cache[:symbol].has_key?(index)
        cached = node_cache[:symbol][index]
        if cached
          node_cache[:symbol][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-zA-Z_]'] ||= Regexp.new(gr), :regexp, index)
          r1 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z_]')
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      if s0.empty?
        @index = i0
        r0 = nil
      else
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Symbol0)
        r0.extend(Symbol0)
      end

      node_cache[:symbol][start_index] = r0

      r0
    end

    module String0
    end

    module String1
      def contents
        elements[1]
      end

    end

    module String2
      def value; contents.text_value.force_encoding(Encoding::UTF_8); end
    end

    def _nt_string
      start_index = index
      if node_cache[:string].has_key?(index)
        cached = node_cache[:string][index]
        if cached
          node_cache[:string][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('"', false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('\'"\'')
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          i3 = index
          if (match_len = has_terminal?('\\"', false, index))
            r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'\\\\"\'')
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r3 = r4
          else
            i5, s5 = index, []
            i6 = index
            if (match_len = has_terminal?('"', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\'"\'')
              r7 = nil
            end
            if r7
              @index = i6
              r6 = nil
              terminal_parse_failure('\'"\'', true)
            else
              @terminal_failures.pop
              @index = i6
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r6
            if r6
              if index < input_length
                r8 = true
                @index += 1
              else
                terminal_parse_failure("any character")
                r8 = nil
              end
              s5 << r8
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(String0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r3 = r5
            else
              @index = i3
              r3 = nil
            end
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          if (match_len = has_terminal?('"', false, index))
            r9 = true
            @index += match_len
          else
            terminal_parse_failure('\'"\'')
            r9 = nil
          end
          s0 << r9
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(String1)
        r0.extend(String2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:string][start_index] = r0

      r0
    end

    module Number0
    end

    module Number1
    end

    module Number2
      def value; eval(text_value); end
    end

    def _nt_number
      start_index = index
      if node_cache[:number].has_key?(index)
        cached = node_cache[:number][index]
        if cached
          node_cache[:number][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if (match_len = has_terminal?('-', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'-\'')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        s3, i3 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
            r4 = true
            @index += 1
          else
            terminal_parse_failure('[0-9]')
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.empty?
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
        if r3
          i6, s6 = index, []
          if (match_len = has_terminal?('.', false, index))
            r7 = true
            @index += match_len
          else
            terminal_parse_failure('\'.\'')
            r7 = nil
          end
          s6 << r7
          if r7
            s8, i8 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                r9 = true
                @index += 1
              else
                terminal_parse_failure('[0-9]')
                r9 = nil
              end
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s6 << r8
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(Number0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Number1)
        r0.extend(Number2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:number][start_index] = r0

      r0
    end

    def _nt_s
      start_index = index
      if node_cache[:s].has_key?(index)
        cached = node_cache[:s][index]
        if cached
          node_cache[:s][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[ \\t\\r\\n]'] ||= Regexp.new(gr), :regexp, index)
          r1 = true
          @index += 1
        else
          terminal_parse_failure('[ \\t\\r\\n]')
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

      node_cache[:s][start_index] = r0

      r0
    end


    class Parser < Treetop::Runtime::CompiledParser
      include SExpr
    end
  end

  SExprParser = SExpr::Parser

end
